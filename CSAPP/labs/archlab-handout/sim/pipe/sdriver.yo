                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f46004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f6b803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f78003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03c: 72b401000000000000   | 	jl remainings
0x045:                      | Loop1:
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x04f: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x059: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x063: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	
0x06d: 6288                 | 	andq %r8, %r8
0x06f: 718200000000000000   | 	jle test1
0x078: c0f00100000000000000 | 	iaddq $1, %rax
0x082:                      | test1:
0x082: 6299                 | 	andq %r9, %r9
0x084: 719700000000000000   | 	jle Loop2
0x08d: c0f00100000000000000 | 	iaddq $1, %rax
0x097:                      | Loop2:
0x097: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0a1: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x0ab: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0b5: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0bf: 6288                 | 	andq %r8, %r8
0x0c1: 71d400000000000000   | 	jle test2
0x0ca: c0f00100000000000000 | 	iaddq $1, %rax
0x0d4:                      | test2:
0x0d4: 6299                 | 	andq %r9, %r9
0x0d6: 71e900000000000000   | 	jle Loop3
0x0df: c0f00100000000000000 | 	iaddq $1, %rax	
0x0e9:                      | Loop3:
0x0e9: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x0f3: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x0fd: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x107: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x111: 6288                 | 	andq %r8, %r8
0x113: 712601000000000000   | 	jle test3
0x11c: c0f00100000000000000 | 	iaddq $1, %rax
0x126:                      | test3:
0x126: 6299                 | 	andq %r9, %r9
0x128: 713b01000000000000   | 	jle Loop4
0x131: c0f00100000000000000 | 	iaddq $1, %rax	
0x13b:                      | Loop4:
0x13b: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x145: 50973800000000000000 | 	mrmovq 56(%rdi), %r9
0x14f: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x159: 40963800000000000000 | 	rmmovq %r9, 56(%rsi)
0x163: 6288                 | 	andq %r8, %r8
0x165: 717801000000000000   | 	jle test4
0x16e: c0f00100000000000000 | 	iaddq $1, %rax
0x178:                      | test4:
0x178: 6299                 | 	andq %r9, %r9
0x17a: 718d01000000000000   | 	jle testE
0x183: c0f00100000000000000 | 	iaddq $1, %rax	
0x18d:                      | testE:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi
0x197: c0f64000000000000000 | 	iaddq $64, %rsi
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1ab: 754500000000000000   | 	jge Loop1
                            | 
0x1b4:                      | remainings:
0x1b4: c0f20800000000000000 | 	iaddq $8, %rdx
0x1be: 737803000000000000   | 	je Done
0x1c7: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x1d1: 75f601000000000000   | 	jge move4
0x1da: c0f20200000000000000 | 	iaddq $2, %rdx
0x1e4: 75d502000000000000   | 	jge move2
0x1ed: 704f03000000000000   | 	jmp move1
                            | 
0x1f6:                      | move4:
0x1f6: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x200: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x20a: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x214: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x21e: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x228: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x232: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x23c: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x246: 6288                 | 	andq %r8, %r8
0x248: 715b02000000000000   | 	jle m4a1
0x251: c0f00100000000000000 | 	iaddq $1, %rax
0x25b:                      | m4a1:
0x25b: 6299                 | 	andq %r9, %r9
0x25d: 717002000000000000   | 	jle m4a2
0x266: c0f00100000000000000 | 	iaddq $1, %rax
0x270:                      | m4a2:
0x270: 62aa                 | 	andq %r10, %r10
0x272: 718502000000000000   | 	jle m4a3
0x27b: c0f00100000000000000 | 	iaddq $1, %rax
0x285:                      | m4a3:
0x285: 62bb                 | 	andq %r11, %r11
0x287: 719a02000000000000   | 	jle m4a4
0x290: c0f00100000000000000 | 	iaddq $1, %rax
0x29a:                      | m4a4:
0x29a: 6222                 | 	andq %rdx, %rdx
0x29c: 737803000000000000   | 	je Done
0x2a5: c0f72000000000000000 | 	iaddq $32, %rdi
0x2af: c0f62000000000000000 | 	iaddq $32, %rsi
0x2b9: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x2c3: 75d502000000000000   | 	jge move2
0x2cc: 704f03000000000000   | 	jmp move1
                            | 
0x2d5:                      | move2:
0x2d5: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x2df: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x2e9: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2f3: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x2fd: 6288                 | 	andq %r8, %r8
0x2ff: 711203000000000000   | 	jle m2a1
0x308: c0f00100000000000000 | 	iaddq $1, %rax
0x312:                      | m2a1:
0x312: 6299                 | 	andq %r9, %r9
0x314: 712703000000000000   | 	jle m2a2
0x31d: c0f00100000000000000 | 	iaddq $1, %rax
0x327:                      | m2a2:
0x327: 6222                 | 	andq %rdx, %rdx
0x329: 737803000000000000   | 	je Done
0x332: c0f71000000000000000 | 	iaddq $16, %rdi
0x33c: c0f61000000000000000 | 	iaddq $16, %rsi
0x346: 704f03000000000000   | 	jmp move1
                            | 
0x34f:                      | move1:	
0x34f: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x359: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x363: 6288                 | 	andq %r8, %r8
0x365: 717803000000000000   | 	jle Done
0x36e: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x378:                      | Done:
0x378: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x379:                      | End:
                            | #/* $end ncopy-ys */
0x379:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x380:                      | 	.align 8
0x380:                      | src:
0x380: 0100000000000000     | 	.quad 1
0x388: 0200000000000000     | 	.quad 2
0x390: fdffffffffffffff     | 	.quad -3
0x398: fcffffffffffffff     | 	.quad -4
0x3a0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3b0:                      | 	.align 16
0x3b0:                      | Predest:
0x3b0: fadebc0000000000     | 	.quad 0xbcdefa
0x3b8:                      | dest:
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8:                      | Postdest:
0x3d8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x3e0:                      | .align 8
                            | # Run time stack
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
0x410: 0000000000000000     | 	.quad 0
0x418: 0000000000000000     | 	.quad 0
0x420: 0000000000000000     | 	.quad 0
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
                            | 
0x460:                      | Stack:
