                            | #######################################################################
                            | # Test for copying block of size 8;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41006000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20800000000000000 | 	irmovq $8, %rdx		# src and dst have 8 elements
0x014: 30f64805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 808203000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 71bd01000000000000   | 	jle remainings
0x04e:                      | Loop1:
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x062: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x06c: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	
0x076: 6288                 | 	andq %r8, %r8
0x078: 718b00000000000000   | 	jle test1
0x081: c0f00100000000000000 | 	iaddq $1, %rax
0x08b:                      | test1:
0x08b: 6299                 | 	andq %r9, %r9
0x08d: 71a000000000000000   | 	jle Loop2
0x096: c0f00100000000000000 | 	iaddq $1, %rax
0x0a0:                      | Loop2:
0x0a0: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0aa: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x0b4: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0be: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0c8: 6288                 | 	andq %r8, %r8
0x0ca: 71dd00000000000000   | 	jle test2
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax
0x0dd:                      | test2:
0x0dd: 6299                 | 	andq %r9, %r9
0x0df: 71f200000000000000   | 	jle Loop3
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax	
0x0f2:                      | Loop3:
0x0f2: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x0fc: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x106: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x110: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x11a: 6288                 | 	andq %r8, %r8
0x11c: 712f01000000000000   | 	jle test3
0x125: c0f00100000000000000 | 	iaddq $1, %rax
0x12f:                      | test3:
0x12f: 6299                 | 	andq %r9, %r9
0x131: 714401000000000000   | 	jle Loop4
0x13a: c0f00100000000000000 | 	iaddq $1, %rax	
0x144:                      | Loop4:
0x144: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x14e: 50973800000000000000 | 	mrmovq 56(%rdi), %r9
0x158: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x162: 40963800000000000000 | 	rmmovq %r9, 56(%rsi)
0x16c: 6288                 | 	andq %r8, %r8
0x16e: 718101000000000000   | 	jle test4
0x177: c0f00100000000000000 | 	iaddq $1, %rax
0x181:                      | test4:
0x181: 6299                 | 	andq %r9, %r9
0x183: 719601000000000000   | 	jle testE
0x18c: c0f00100000000000000 | 	iaddq $1, %rax	
0x196:                      | testE:
0x196: c0f74000000000000000 | 	iaddq $64, %rdi
0x1a0: c0f64000000000000000 | 	iaddq $64, %rsi
0x1aa: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1b4: 754e00000000000000   | 	jge Loop1
                            | 
0x1bd:                      | remainings:
0x1bd: c0f20800000000000000 | 	iaddq $8, %rdx
0x1c7: 738103000000000000   | 	je Done
0x1d0: c0f2fcffffffffffffff | 	iaddq $-4, %rdx
0x1da: 75ff01000000000000   | 	jge move4
0x1e3: c0f20200000000000000 | 	iaddq $2, %rdx
0x1ed: 75de02000000000000   | 	jge move2
0x1f6: 705803000000000000   | 	jmp move1
                            | 	
0x1ff:                      | move4:
0x1ff: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x209: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x213: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x21d: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x227: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x231: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x23b: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x245: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x24f: 6288                 | 	andq %r8, %r8
0x251: 716402000000000000   | 	jle m4a1
0x25a: c0f00100000000000000 | 	iaddq $1, %rax
0x264:                      | m4a1:
0x264: 6299                 | 	andq %r9, %r9
0x266: 717902000000000000   | 	jle m4a2
0x26f: c0f00100000000000000 | 	iaddq $1, %rax
0x279:                      | m4a2:
0x279: 62aa                 | 	andq %r10, %r10
0x27b: 718e02000000000000   | 	jle m4a3
0x284: c0f00100000000000000 | 	iaddq $1, %rax
0x28e:                      | m4a3:
0x28e: 62bb                 | 	andq %r11, %r11
0x290: 71a302000000000000   | 	jle m4a4
0x299: c0f00100000000000000 | 	iaddq $1, %rax
0x2a3:                      | m4a4:
0x2a3: 6222                 | 	andq %rdx, %rdx
0x2a5: 738103000000000000   | 	je Done
0x2ae: c0f72000000000000000 | 	iaddq $32, %rdi
0x2b8: c0f62000000000000000 | 	iaddq $32, %rsi
0x2c2: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x2cc: 75de02000000000000   | 	jge move2
0x2d5: 705803000000000000   | 	jmp move1
                            | 
0x2de:                      | move2:
0x2de: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x2e8: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x2f2: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x2fc: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x306: 6288                 | 	andq %r8, %r8
0x308: 711b03000000000000   | 	jle m2a1
0x311: c0f00100000000000000 | 	iaddq $1, %rax
0x31b:                      | m2a1:
0x31b: 6299                 | 	andq %r9, %r9
0x31d: 713003000000000000   | 	jle m2a2
0x326: c0f00100000000000000 | 	iaddq $1, %rax
0x330:                      | m2a2:
0x330: 6222                 | 	andq %rdx, %rdx
0x332: 738103000000000000   | 	je Done
0x33b: c0f71000000000000000 | 	iaddq $16, %rdi
0x345: c0f61000000000000000 | 	iaddq $16, %rsi
0x34f: 705803000000000000   | 	jmp move1
                            | 
0x358:                      | move1:	
0x358: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x362: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x36c: 6288                 | 	andq %r8, %r8
0x36e: 718103000000000000   | 	jle Done
0x377: c0f00100000000000000 | 	iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x381:                      | Done:
0x381: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x382:                      | End:
                            | #/* $end ncopy-ys */
0x382:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 3.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x382:                      | check:
                            | 	# Return value test
0x382: 30fa0300000000000000 | 	irmovq $3,%r10
0x38c: 61a0                 | 	subq %r10,%rax
0x38e: 73aa03000000000000   | 	je checkb
0x397: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x3a1: 70e804000000000000   | 	jmp cdone
0x3aa:                      | checkb:
                            | 	# Code length check
0x3aa: 30f08203000000000000 | 	irmovq EndFun,%rax
0x3b4: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x3be: 6120                 | 	subq %rdx,%rax
0x3c0: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x3ca: 6102                 | 	subq %rax,%rdx
0x3cc: 75e803000000000000   | 	jge checkm
0x3d5: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3df: 70e804000000000000   | 	jmp cdone
0x3e8:                      | checkm:
0x3e8: 30f24805000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3f2: 30f3f004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3fc: 30f70800000000000000 | 	irmovq $8,%rdi  # Count
0x406: 6277                 | 	andq %rdi,%rdi
0x408: 736604000000000000   | 	je checkpre         # Skip check if count = 0
0x411:                      | mcloop:
0x411: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x41b: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x425: 6160                 | 	subq %rsi,%rax
0x427: 734304000000000000   | 	je  mok
0x430: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x43a: 70e804000000000000   | 	jmp cdone
0x443:                      | mok:
0x443: 30f00800000000000000 | 	irmovq $8,%rax
0x44d: 6002                 | 	addq %rax,%rdx	  # dest ++
0x44f: 6003                 | 	addq %rax,%rbx    # src++
0x451: 30f00100000000000000 | 	irmovq $1,%rax
0x45b: 6107                 | 	subq %rax,%rdi    # cnt--
0x45d: 761104000000000000   | 	jg mcloop
0x466:                      | checkpre:
                            | 	# Check for corruption
0x466: 30f24005000000000000 | 	irmovq Predest,%rdx
0x470: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x47a: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x484: 6120                 | 	subq %rdx,%rax
0x486: 73a204000000000000   | 	je checkpost
0x48f: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x499: 70e804000000000000   | 	jmp cdone
0x4a2:                      | checkpost:
                            | 	# Check for corruption
0x4a2: 30f28805000000000000 | 	irmovq Postdest,%rdx
0x4ac: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x4b6: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x4c0: 6120                 | 	subq %rdx,%rax
0x4c2: 73de04000000000000   | 	je checkok
0x4cb: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x4d5: 70e804000000000000   | 	jmp cdone
0x4de:                      | checkok:
                            | 	# Successful checks
0x4de: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4e8:                      | cdone:
0x4e8: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4f0:                      | 	.align 8
0x4f0:                      | src:
0x4f0: ffffffffffffffff     | 	.quad -1
0x4f8: feffffffffffffff     | 	.quad -2
0x500: fdffffffffffffff     | 	.quad -3
0x508: 0400000000000000     | 	.quad 4
0x510: fbffffffffffffff     | 	.quad -5
0x518: faffffffffffffff     | 	.quad -6
0x520: 0700000000000000     | 	.quad 7
0x528: 0800000000000000     | 	.quad 8
0x530: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x540:                      | 	.align 16
0x540:                      | Predest:
0x540: fadebc0000000000     | 	.quad 0xbcdefa
0x548:                      | dest:
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588:                      | Postdest:
0x588: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x590:                      | .align 8
                            | # Run time stack
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
0x5b8: 0000000000000000     | 	.quad 0
0x5c0: 0000000000000000     | 	.quad 0
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
                            | 
0x610:                      | Stack:
