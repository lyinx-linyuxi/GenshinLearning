                            | #######################################################################
                            | # Test for copying block of size 2;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f47005000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20200000000000000 | 	irmovq $2, %rdx		# src and dst have 2 elements
0x014: 30f6d804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7b004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 804503000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 72bd01000000000000   | 	jl remainings
0x04e:                      | Loop1:
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x058: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x062: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x06c: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	
0x076: 6288                 | 	andq %r8, %r8
0x078: 718b00000000000000   | 	jle test1
0x081: c0f00100000000000000 | 	iaddq $1, %rax
0x08b:                      | test1:
0x08b: 6299                 | 	andq %r9, %r9
0x08d: 71a000000000000000   | 	jle Loop2
0x096: c0f00100000000000000 | 	iaddq $1, %rax
0x0a0:                      | Loop2:
0x0a0: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x0aa: 50971800000000000000 | 	mrmovq 24(%rdi), %r9
0x0b4: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x0be: 40961800000000000000 | 	rmmovq %r9, 24(%rsi)
0x0c8: 6288                 | 	andq %r8, %r8
0x0ca: 71dd00000000000000   | 	jle test2
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax
0x0dd:                      | test2:
0x0dd: 6299                 | 	andq %r9, %r9
0x0df: 71f200000000000000   | 	jle Loop3
0x0e8: c0f00100000000000000 | 	iaddq $1, %rax	
0x0f2:                      | Loop3:
0x0f2: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x0fc: 50972800000000000000 | 	mrmovq 40(%rdi), %r9
0x106: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x110: 40962800000000000000 | 	rmmovq %r9, 40(%rsi)
0x11a: 6288                 | 	andq %r8, %r8
0x11c: 712f01000000000000   | 	jle test3
0x125: c0f00100000000000000 | 	iaddq $1, %rax
0x12f:                      | test3:
0x12f: 6299                 | 	andq %r9, %r9
0x131: 714401000000000000   | 	jle Loop4
0x13a: c0f00100000000000000 | 	iaddq $1, %rax	
0x144:                      | Loop4:
0x144: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x14e: 50973800000000000000 | 	mrmovq 56(%rdi), %r9
0x158: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x162: 40963800000000000000 | 	rmmovq %r9, 56(%rsi)
0x16c: 6288                 | 	andq %r8, %r8
0x16e: 718101000000000000   | 	jle test4
0x177: c0f00100000000000000 | 	iaddq $1, %rax
0x181:                      | test4:
0x181: 6299                 | 	andq %r9, %r9
0x183: 719601000000000000   | 	jle testE
0x18c: c0f00100000000000000 | 	iaddq $1, %rax	
0x196:                      | testE:
0x196: c0f74000000000000000 | 	iaddq $64, %rdi
0x1a0: c0f64000000000000000 | 	iaddq $64, %rsi
0x1aa: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x1b4: 754e00000000000000   | 	jge Loop1
                            | 
0x1bd:                      | remainings:
0x1bd: c0f20400000000000000 | 	iaddq $4, %rdx
0x1c7: 760902000000000000   | 	jg right
0x1d0: 73a002000000000000   | 	je move4
0x1d9: c0f20200000000000000 | 	iaddq $2, %rdx
0x1e3: 73f202000000000000   | 	je move2
0x1ec: 76c902000000000000   | 	jg move3
0x1f5: c0f20100000000000000 | 	iaddq $1, %rdx
0x1ff: 731b03000000000000   | 	je move1
0x208: 90                   | 	ret
                            | 
0x209:                      | right:
0x209: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x213: 734e02000000000000   | 	je move6
0x21c: 727702000000000000   | 	jl move5
                            | 
0x225:                      | move7:
0x225: 50873000000000000000 | 	mrmovq $48(%rdi), %r8
0x22f: 40863000000000000000 | 	rmmovq %r8, $48(%rsi)
0x239: 6288                 | 	andq %r8, %r8
0x23b: 714e02000000000000   | 	jle move6
0x244: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x24e:                      | move6:
0x24e: 50872800000000000000 | 	mrmovq $40(%rdi), %r8
0x258: 40862800000000000000 | 	rmmovq %r8, $40(%rsi)
0x262: 6288                 | 	andq %r8, %r8
0x264: 717702000000000000   | 	jle move5
0x26d: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x277:                      | move5:
0x277: 50872000000000000000 | 	mrmovq $32(%rdi), %r8
0x281: 40862000000000000000 | 	rmmovq %r8, $32(%rsi)
0x28b: 6288                 | 	andq %r8, %r8
0x28d: 71a002000000000000   | 	jle move4
0x296: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x2a0:                      | move4:
0x2a0: 50871800000000000000 | 	mrmovq $24(%rdi), %r8
0x2aa: 40861800000000000000 | 	rmmovq %r8, $24(%rsi)
0x2b4: 6288                 | 	andq %r8, %r8
0x2b6: 71c902000000000000   | 	jle move3
0x2bf: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x2c9:                      | move3:
0x2c9: 50871000000000000000 | 	mrmovq $16(%rdi), %r8
0x2d3: 40861000000000000000 | 	rmmovq %r8, $16(%rsi)
0x2dd: 6288                 | 	andq %r8, %r8
0x2df: 71f202000000000000   | 	jle move2
0x2e8: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x2f2:                      | move2:
0x2f2: 50870800000000000000 | 	mrmovq $8(%rdi), %r8
0x2fc: 40860800000000000000 | 	rmmovq %r8, $8(%rsi)
0x306: 6288                 | 	andq %r8, %r8
0x308: 711b03000000000000   | 	jle move1
0x311: c0f0ffffffffffffffff | 	iaddq $-1, %rax
0x31b:                      | move1:
0x31b: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x325: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x32f: 6288                 | 	andq %r8, %r8
0x331: 714403000000000000   | 	jle Done
0x33a: c0f0ffffffffffffffff | 	iaddq $-1, %rax
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x344:                      | Done:
0x344: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x345:                      | End:
                            | #/* $end ncopy-ys */
0x345:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x345:                      | check:
                            | 	# Return value test
0x345: 30fa0100000000000000 | 	irmovq $1,%r10
0x34f: 61a0                 | 	subq %r10,%rax
0x351: 736d03000000000000   | 	je checkb
0x35a: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x364: 70ab04000000000000   | 	jmp cdone
0x36d:                      | checkb:
                            | 	# Code length check
0x36d: 30f04503000000000000 | 	irmovq EndFun,%rax
0x377: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x381: 6120                 | 	subq %rdx,%rax
0x383: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x38d: 6102                 | 	subq %rax,%rdx
0x38f: 75ab03000000000000   | 	jge checkm
0x398: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x3a2: 70ab04000000000000   | 	jmp cdone
0x3ab:                      | checkm:
0x3ab: 30f2d804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x3b5: 30f3b004000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x3bf: 30f70200000000000000 | 	irmovq $2,%rdi  # Count
0x3c9: 6277                 | 	andq %rdi,%rdi
0x3cb: 732904000000000000   | 	je checkpre         # Skip check if count = 0
0x3d4:                      | mcloop:
0x3d4: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x3de: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x3e8: 6160                 | 	subq %rsi,%rax
0x3ea: 730604000000000000   | 	je  mok
0x3f3: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x3fd: 70ab04000000000000   | 	jmp cdone
0x406:                      | mok:
0x406: 30f00800000000000000 | 	irmovq $8,%rax
0x410: 6002                 | 	addq %rax,%rdx	  # dest ++
0x412: 6003                 | 	addq %rax,%rbx    # src++
0x414: 30f00100000000000000 | 	irmovq $1,%rax
0x41e: 6107                 | 	subq %rax,%rdi    # cnt--
0x420: 76d403000000000000   | 	jg mcloop
0x429:                      | checkpre:
                            | 	# Check for corruption
0x429: 30f2d004000000000000 | 	irmovq Predest,%rdx
0x433: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x43d: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x447: 6120                 | 	subq %rdx,%rax
0x449: 736504000000000000   | 	je checkpost
0x452: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x45c: 70ab04000000000000   | 	jmp cdone
0x465:                      | checkpost:
                            | 	# Check for corruption
0x465: 30f2e804000000000000 | 	irmovq Postdest,%rdx
0x46f: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x479: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x483: 6120                 | 	subq %rdx,%rax
0x485: 73a104000000000000   | 	je checkok
0x48e: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x498: 70ab04000000000000   | 	jmp cdone
0x4a1:                      | checkok:
                            | 	# Successful checks
0x4a1: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x4ab:                      | cdone:
0x4ab: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x4b0:                      | 	.align 8
0x4b0:                      | src:
0x4b0: ffffffffffffffff     | 	.quad -1
0x4b8: 0200000000000000     | 	.quad 2
0x4c0: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x4d0:                      | 	.align 16
0x4d0:                      | Predest:
0x4d0: fadebc0000000000     | 	.quad 0xbcdefa
0x4d8:                      | dest:
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8:                      | Postdest:
0x4e8: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x4f0:                      | .align 8
                            | # Run time stack
0x4f0: 0000000000000000     | 	.quad 0
0x4f8: 0000000000000000     | 	.quad 0
0x500: 0000000000000000     | 	.quad 0
0x508: 0000000000000000     | 	.quad 0
0x510: 0000000000000000     | 	.quad 0
0x518: 0000000000000000     | 	.quad 0
0x520: 0000000000000000     | 	.quad 0
0x528: 0000000000000000     | 	.quad 0
0x530: 0000000000000000     | 	.quad 0
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
                            | 
0x570:                      | Stack:
