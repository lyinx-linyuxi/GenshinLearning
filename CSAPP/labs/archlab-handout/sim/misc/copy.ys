# Execution begins at address 0 
	.pos 0 
	irmovq stack, %rsp  	# Set up stack pointer  
	call main		# Execute main program
	halt			# Terminate program 

.align 8
# Source block
src:    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:   .quad 0x111
    .quad 0x222
    .quad 0x333


main:   irmovq src,%rdi	
    irmovq dest, %rsi
	irmovq $3,%rdx  # len = 3
	call copy		# copy(src, dest, len)
	ret 

# long copy(long *src, long *dest, long len)
# src in %rdi, dest in %rsi, len in %rdx
copy:    irmovq $8,%r8           # Constant 8
    irmovq $1, %r9               # Constant 1
    xorq %rax, %rax              # Clear rax
loop:   mrmovq (%rdi), %rcx          # Load src[0] into rcx
    xorq %rcx, %rax              # checksum in rax
    rmmovq %rcx, (%rsi)          # Store src[0] into dest[0]
    addq %r8, %rdi               # Increment src
    addq %r8, %rsi               # Increment dest
    subq %r9, %rdx               # Decrement len
    jne loop                     # If len != 0, repeat loop
    ret                          # Return to caller


# The stack starts here and grows to lower addresses
	.pos 0x200		
stack:	 
